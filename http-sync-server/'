use std::future::Future;
use std::pin::Pin;
use std::task::Context;
use std::task::Poll;
use std::thread;

pub struct Task {
    future: Pin<Box<dyn Future<Output = ()>>>,
}

impl Task {
    pub fn new(future: impl Future<Output = ()> + 'static) -> Self {
        Task {
            future: Box::pin(future),
        }
    }

    pub fn poll(&mut self, context: &mut Context) -> Poll<()> {
        self.future.as_mut().poll(context)
    }
}

pub struct Worker {
    id: usize,
    pub thread: Option<thread::JoinHandle<()>>,
}
